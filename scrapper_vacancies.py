# Библиотека для работы с HTTP-запросами, используется для обращения к API hh.ru
import requests

# Пакет для удобной работы с данными в формате json
import json

# Модуль для работы со значением времени
import time

# Модуль для работы с операционной системой, будет использоваться для работы с файлами
import os

def getPage(page=0):
    """
    Создаение функции для получения страницы со списком вакансий.
    Аргументы:
        page - Индекс страницы, начинается с 0. Значение по умолчанию 0, т.е. первая страница
    """

    # Справочник для параметров GET-запроса
    params = {
        'text': 'NAME:Инженер',  # Текст фильтра. В имени должно быть слово "Инженер"
        'area': 16,  # Поиск ощуществляется по вакансиям Беларуси
        'page': page,  # Индекс страницы поиска на HH
        'per_page': 100  # Кол-во вакансий на 1 странице
    }

    req = requests.get('https://api.hh.ru/vacancies', params)  # Отправка запроса к API
    data = req.content.decode()  # Декодировка ответа, чтобы кириллица отображалась корректно
    req.close()
    return data

# Считывание первых 2000 вакансий
for page in range(0, 20):

    # Преобразование текста ответа запроса в справочник Python
    jsObj = json.loads(getPage(page))

    # Сохранение файлов в папку {путь до текущего документа со скриптом}\docs\pagination
    # Определение количества файлов в папке для сохранения документа с ответом запроса
    # Использование полученного значения для формирования имени документа
    nextFileName = './docs/pagination/{}.json'.format(len(os.listdir('./docs/pagination')))

    # Создание нового документа, запись в него ответа запроса, закрытие
    f = open(nextFileName, mode='w', encoding='utf8')
    f.write(json.dumps(jsObj, ensure_ascii=False))
    f.close()

    # Проверка на последнюю страницу, если вакансий меньше 2000
    if (jsObj['pages'] - page) <= 1:
        break

    # Необязательная задержка, однако, применим для разгрузки сервисов hh
    time.sleep(0.25)

    for fl in os.listdir('./docs/pagination'):

        # Открытие файла, чтение содержимого, закрытие
        f = open('./docs/pagination/{}'.format(fl), encoding='utf8')
        jsonText = f.read()
        f.close()

        # Преобразование полученного текста в объект справочника
        jsonObj = json.loads(jsonText)

    print('Вакансии собраны')

